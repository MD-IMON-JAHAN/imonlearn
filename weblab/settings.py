"""
Django settings for weblab project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import sys
from pathlib import Path

# ======================
# AUTOMATIC BOOTSTRAP
# ======================
BASE_DIR = Path(__file__).resolve().parent.parent

# Auto-create required files/directories
os.makedirs(BASE_DIR / 'staticfiles', exist_ok=True)
os.makedirs(BASE_DIR / 'media', exist_ok=True)
if not (BASE_DIR / 'db.sqlite3').exists():
    (BASE_DIR / 'db.sqlite3').touch()

# ======================
# ESSENTIAL SETTINGS
# ======================
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-' + os.urandom(20).hex())
DEBUG = os.environ.get('DEBUG', 'False') == 'True'
ALLOWED_HOSTS = ['*']

# Minimal app configuration
INSTALLED_APPS = [
    'django.contrib.staticfiles',
    'courses',  # Your core app
]

# Stripped-down middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
]

# Database - SQLite only (lightest option)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Static files (simplest possible config)
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static'] if (BASE_DIR / 'static').exists() else []

# ======================
# AUTO-CONFIGURATION
# ======================
if 'runserver' not in sys.argv:
    # Automatic static file collection
    if not list(STATIC_ROOT.glob('*')):
        from django.core.management import execute_from_command_line
        execute_from_command_line([sys.argv[0], 'collectstatic', '--noinput'])
    
    # Auto-create database tables
    if not (BASE_DIR / 'db.sqlite3').stat().st_size:
        from django.db import connection
        with connection.cursor() as cursor:
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS django_migrations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    app VARCHAR(255) NOT NULL,
                    name VARCHAR(255) NOT NULL,
                    applied DATETIME NOT NULL
                )
            """)

# ======================
# RUNTIME OPTIMIZATIONS
# ======================
# Disable unused systems
DATABASES['default']['OPTIONS'] = {'timeout': 20}  # Faster SQLite timeouts
os.environ['PYTHONOPTIMIZE'] = '1'  # Basic bytecode optimization

# Gunicorn compatibility (will be ignored in dev)
if 'gunicorn' in os.environ.get('SERVER_SOFTWARE', ''):
    os.environ.setdefault('WEB_CONCURRENCY', '1')
    os.environ.setdefault('WORKER_CLASS', 'sync')
    os.environ.setdefault('TIMEOUT', '90')

# ======================
# SECURITY (Production)
# ======================
if not DEBUG:
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
